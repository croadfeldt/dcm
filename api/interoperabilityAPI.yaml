openapi: 3.0.4
info:
  title: DCM Interoperability API
  description: |-
    This API is used to define and manage the services provided by the Services Providers.
  version: 0.0.1
paths:
  /service:
    get:
      tags:
        - service
      summary: List all services.
      description: Returns a list of services.
      operationId: getServices
      responses:
        '200':
          description: successful operation
          content:
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: Invalid ID supplied
        '404':
          description: Service not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - servicestore_auth:
            - write:services
            - read:services
    post:
      tags:
        - service
      summary: Add a new service.
      description: Add a new service to the catalog.
      operationId: addService
      requestBody:
        description: Create a new service in the catalog
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - servicestore_auth:
            - write:services
            - read:services
  /service/{serviceId}:
    get:
      tags:
        - service
      summary: Find service by ID.
      description: Returns a single service.
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID of service to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            application/xml:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid ID supplied
        '404':
          description: Service not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - servicestore_auth:
            - write:services
            - read:services
    post:
      tags:
        - service
      summary: Updates a service in the store with form data.
      description: Updates a service resource based on the form data.
      operationId: updateServiceWithForm
      parameters:
        - name: serviceId
          in: path
          description: ID of service that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: Name of service that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of service that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            application/xml:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - servicestore_auth:
            - write:services
            - read:services
    delete:
      tags:
        - service
      summary: Deletes a service.
      description: Delete a service.
      operationId: deleteService
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: serviceId
          in: path
          description: Service id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Service deleted
        '400':
          description: Invalid service value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - servicestore_auth:
            - write:services
            - read:services
components:
  schemas:
    Service:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
          format: uuid
        apiVersion:
          type: string
          description: version of the service definition
        kind:
          type: string
          description: resource kind name (PascalCase))
        spec:
          type: object
          description: openAPI object of the service specs object
        status:
          type: object
          description: openAPI object of the service status object
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Service:
      description: Service object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
        application/xml:
          schema:
            $ref: '#/components/schemas/Service'
  securitySchemes:
    servicestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://servicestore3.swagger.io/oauth/authorize
          scopes:
            "write:services": modify services in your account
            "read:services": read your services
    api_key:
      type: apiKey
      name: api_key
      in: header
